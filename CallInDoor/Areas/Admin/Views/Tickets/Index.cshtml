
@{
    ViewData["Title"] = "مدیریت آگهی ها";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" integrity="sha512-+4zCK9k+qNFUR5X+cKL9EIR+ZOhtIloNl9GIKS57V1MyNsYpYcUrUeQc9vNfzsWfV28IaLL3i96P9sdNyeRssA==" crossorigin="anonymous" />
    <link rel="~/stylesheet" href="vendors/dataTable/dataTables.min.css" type="text/css">
    <link rel="stylesheet" href="/vendors/select2/css/select2.min.css" type="text/css">

    <style>
        .ticketAnswer {
            max-height: 110px;
            border: 1px solid #ccc;
            border-radius: 5%;
            overflow-y: scroll;
        }

        #label {
            margin: 28% 28%;
        }

        #selectAll {
            margin: 33% 13%;
        }

        .pagination > li {
            margin-left: 1%;
            cursor: pointer;
        }

        button {
            cursor: pointer;
        }

        .table td {
            text-align: center;
        }

        .table > tbody > tr > td {
            vertical-align: middle;
        }

        .selectedLi {
            color: red;
        }

        label {
            padding-top: 10px;
            vertical-align: top;
        }

        #filtering {
            vertical-align: text-bottom;
        }

        #SendAnswerBtn {
            border: 1px solid black;
            background: #ddd;
        }

        #CreateTicketModalBtn {
            border: 1px solid black;
            background: #ddd;
        }

        .error {
            animation-name: example;
            animation-duration: 1.6s;
        }

        @@keyframes example {
            0% {
                border-color: red;
                width: 102%;
                height: 100%;
            }

            10% {
                border-color: white;
                width: 100%;
                height: 99%;
            }

            20% {
                border-color: red;
                width: 102%;
                height: 100%;
            }

            30% {
                border-color: white;
                width: 100%;
                height: 99%;
            }

            40% {
                border-color: red;
                width: 102%;
                height: 100%;
            }

            50% {
                border-color: white;
                width: 100%;
                height: 100%;
            }

            60% {
                border-color: red;
                width: 102%;
                height: 99%;
            }

            70% {
                border-color: white;
                width: 100%;
                height: 100%;
            }

            80% {
                border-color: red;
                width: 102%;
                height: 99%;
            }

            90% {
                border-color: white;
                width: 100%;
                height: 100%;
            }

            100% {
                border-color: red;
                width: 102%;
                height: 99%;
            }
        }
    </style>


}
<div class="row">


    <div class="form-group col-6">
        <button style="margin-top: 7%;" type="button" class="btn btn-light" id="CreateTicketModalBtn" onclick="sendTicket()" data-toggle="modal" data-target="#CreateTicket">
            ارسال پیام جدید
        </button>
    </div>
    <div class="form-group col-6">
        <label for="exampleFormControlSelect1">مرتب سازی کاربران</label>
        <select class="form-control w-50" id="role" name="role">
            <option value="Employer">کارفرما</option>
            <option value="Employee">کارجو</option>
        </select>
    </div>
</div>
<button type="button" id="rejectResultBtn" class="btn btn-primary mr-2 mb-2 d-none" data-toggle="modal" data-target="#rejectResult">
</button>
<button type="button" id="SendAnswerBtn" class="d-none" data-toggle="modal" data-target="#SendAnswer">
</button>



<hr />
<table id="myTable" class="table table-striped table-bordered table-responsive">
    <thead>
        <tr>

            <th>#</th>
            <th>فرستنده</th>
            <th>گیرنده</th>
            <th> اولویت</th>
            <th>موضوع</th>
            <th>متن پیام</th>
            <th>پاسخ</th>
            <th>فایل فرستنده</th>
            <th> فایل گیرنده</th>
            <th> تاریخ ایجاد</th>
            <th>تاریخ پاسخدهی</th>
        </tr>
    </thead>
    <tbody id="rewsOfTable">
    </tbody>
</table>

<ul class="pagination" style=" direction: ltr; ">
</ul>



<!--CreateModal-->
<div class="modal fade" tabindex="-1" role="dialog" id="rejectResult">
    <div class="modal-dialog modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">نمایش کامل توضیحات</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="modalParagraph">


                </p>


            </div>
            <div class="modal-footer">
                <button type="button" id="closeModal" class="btn btn-danger w-25 mx-auto" style="display:block;text-align:center; margin-left:35%" data-dismiss="modal">بستن</button>
                @*<button type="button" class="btn btn-primary">اعمال تغییرات</button>*@
            </div>
        </div>
    </div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="SendAnswer">
    <div class="modal-dialog modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">پاسخ پیام</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" id="SendAnswerClose">×</span>
                </button>
            </div>
            <div class="modal-body">
                <form class="SendAnswerForm">

                    <input type="hidden" value="" name="id" id="id" />
                    <div class="form-row">
                        <div class="form-group col-md-12 disabled">
                            <label for="Answersubject">موضوع </label>
                            <div name="Answersubject" class="form-control disabled" id="Answersubject"></div>
                        </div>
                        <div class="form-group col-md-12 ">
                            <label for="AnswerContent">پیام </label>
                            <div name="AnswerContent" class="ticketAnswer" id="AnswerContent"></div>

                        </div>
                        <div class="form-group col-md-12 disabled">
                            <label for="Answer">پاسخ </label>
                            <textarea type="text" name="Answer" class="form-control" id="Answer"></textarea>
                        </div>
                        <div class="form-group col-md-12">
                            <label for="AnswerFile">فایل </label>
                            <input type="file" name="AnswerFile" class="form-control" id="AnswerFile">
                        </div>
                    </div>



                    <button type="submit" id="SendAnswerBtn" class="btn btn-block">ثبت</button>
                </form>

            </div>
        </div>
    </div>
</div>


<div class="modal fade" tabindex="-1" role="dialog" id="CreateTicket">
    <div class="modal-dialog modal-md" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">ارسال پیام</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" id="CreateTicketClose">×</span>
                </button>
            </div>
            <div class="modal-body">
                <form class="CreateTicketForm">

                    @*<input type="hidden" value="" name="id" id="id" />*@
                    <div class="form-row">
                        <div class="form-group col-md-12 ">
                            <label for="subject">موضوع </label>
                            <input type="text" name="subject" class="form-control " id="subject" />
                        </div>
                        <div class="form-group col-md-12 ">
                            <label for="TicketPriorityStatus">اولویت </label>
                            <select id="TicketPriorityStatus" name="TicketPriorityStatus" class="form-control">
                                <option value="1">فوری</option>
                                <option value="2">معمولی</option>
                                <option value="3">جهت اطلاع</option>
                            </select>

                        </div>

                        <div class="form-group col-md-8 ">
                            <label for="TicketPriorityStatus">ارسال به </label>
                            <select id="userId" name="userId" class="form-control" multiple>
                                @foreach (var item in ViewBag.UserList)
                                {
                                    <option value="@item.Id">@item.Fullname</option>

                                }
                            </select>


                        </div>

                        <div class="form-group col-md-4 ">
                            <input type="checkbox" class="form-check-input" id="selectAll">
                            <label id="label" class="form-check-label" for="selectAll">انتخاب همه</label>

                        </div>

                        <div class="form-group col-md-12 ">
                            <label for="content">متن پیام </label>
                            <textarea type="text" name="content" class="form-control" id="content"></textarea>
                        </div>
                        <div class="form-group col-md-12">
                            <label for="file">فایل </label>
                            <input type="file" name="file" class="form-control" id="file">
                        </div>
                    </div>



                    <button type="submit" id="CreateTicketBtn" class="btn btn-light-primary btn-block">ثبت</button>
                </form>

            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script src="~/vendors/dataTable/jquery.dataTables.min.js"></script>

    <!-- Bootstrap 4 and responsive compatibility -->
    <script src="~/vendors/dataTable/dataTables.bootstrap4.min.js"></script>
    <script src="~/vendors/dataTable/dataTables.responsive.min.js"></script>
    <script src="/vendors/select2/js/select2.min.js"></script>


    <script>



        function sendTicket() {
            $(".modal-backdrop").removeClass("d-none");
        }
        //seprator

        function GetData(url, data, isAlreadyTable) {
            if (isAlreadyTable == true) {
                $('#myTable').DataTable().destroy();
            }
            var oTable = $('#myTable').DataTable({
                responsive: true,
                ordering: false,
                processing: true,
                paging: true,
                language: {
                    url: "//cdn.datatables.net/plug-ins/1.10.20/i18n/Persian.json"
                },
                ajax: {
                    beforeSend: setAuthHeader,
                    url: url,
                    dataSrc: "",
                    type: "GET",
                    dataType: "json",
                    cache: true,
                    delay: 1000,
                    data: data,
                    //, success: function (res) {
                    //    alert()
                    //    console.log(res);
                    //}
                },
                columns: [
                    {
                        data: 'id',
                        render: function (data, type, item) {

                            if (item.senderFullName == "ادمین") {
                                return ` <div data-id=${data} class="form-group btn sender">${data}</div>  `

                            }
                            else {
                                return ` <div data-id=${data} class="form-group btn reciever">${data}</div>  `
                            }
                        }

                    }, {
                        data: 'senderFullName',
                        render: function (data, type, item) {


                            return '<div class="form-group btn">' + data + '</div>'
                        }
                    },
                    {
                        data: 'receiverFullName',
                        render: function (data, type, item) {


                            return '<div class="form-group btn">' + data + '</div>'
                        }
                    },
                    {
                        data: 'ticketPriorityStatus',
                        render: function (data, type, item) {
                            var color = "text-dark";
                            switch (data) {
                                case 1:
                                    color = "text-danger";
                                    break;
                                case 2:
                                    color = "text-warning";
                                    break;
                                case 3:
                                    color = "text-light";
                                    break;
                                default:
                            }
                            return `<div class="form-group btn ${color}">  ${GetTicketPriorityStatus(data)}</div>`;
                        }

                    },
                    {
                        data: 'subject',
                        render: function (data, type, item) {


                            return '<div class="form-group btn">' + data + '</div>'
                        }
                    },

                    {
                        data: "content",
                        render: function (data, type, item) {


                            var realData = data;

                            data = data.length > 30 ? data.substring(0, 9) : data;

                            return `<div class="form-group"> <button onclick="showContent(this)"  value="${realData}" class="btn btn-primary" style="margin-bottom:17%;">نمایش</button>${data} </div>`
                        }
                    },
                    {

                        data: "answer",
                        render: function (data, type, item) {
                            if (data == null) {
                                if (item.hasAnswer) {
                                    return `<buttno class="form-group btn btn-warning" data-content='${item.content}' data-subject='${item.subject} ' data-id=${item.id} onclick="Answer(this)">پاسخ</buttno>`

                                }
                                else {
                                    return `<label class="form-group btn ">منتظر پاسخ</label>`;

                                }
                            }
                            else {

                                var realData = data;

                                data = data.length > 30 ? data.substring(0, 9) : data;

                                return `<div class="form-group"> <button onclick="showContent(this)"  value="${realData}" class="btn btn-primary" style="margin-bottom:17%;">نمایش</button>${data} </div>`
                            }


                        }

                    },
                    {

                        data: "senderFile",
                        render: function (data, type, item) {


                            if (data == null || data == "") {
                                return '<buttno class="form-group btn btn-warning d-none"></buttno>'

                            }
                            else {

                                return `<a class="form-group btn btn-light"  href="../Img/Ticket/${data}" download >دانلود</a>`

                            }
                        }
                    },
                    {
                        data: "receiverFile",
                        render: function (data, type, item) {


                            if (data == null || data == "") {
                                return '<buttno class="form-group btn btn-warning d-none" ></buttno>'

                            }
                            else {
                                return `<a class="form-group btn btn-light"  href="../Img/Ticket/${data}" download >دانلود</a>`

                            }
                        }
                    },
                    //<th> تاریخ ایجاد</th>
                    //<th>تاریخ پاسخدهی</th>
                    {
                        data: "createDate",
                        render: function (data, type, item) {
                            return `<label class="form-group btn">${data}</label>`;


                        }
                    },
                    {
                        data: "answerDate",
                        render: function (data, type, item) {
                            if (data == "") {
                                return `<label class="form-group btn ">بی پاسخ</label>`;

                            }
                            else {

                                return `<label class="form-group btn ">${data}</label>`;

                            }

                        }
                    }


                ],
            });
        };



        $(document).ready(async function () {
            GetNotifCount();
            $("#notifCount").addClass("d-none");
            //loadData
            GetData('/api/Tickets/GetAllTicketForAdmin', {}, false);
            $('#userId').select2({
                placeholder: 'Select'
            });
            GetNotifCount();
            setTimeout(function () {
                seenSender();
                seenReciever();
            }, 3000)



        });

        function showContent(e) {
            $("#modalParagraph").html($(e).val());
            $("#rejectResultBtn").click();
        }
        function changeCreateStatus(e) {
            var statusId = $(e).attr("data-status");
            $("#adverCreateStatusInModal").val(statusId);
            adverId = $(e).attr("data-id");
            $("#SendAnswerBtn").click();
        }
        function Answer(e) {
            var id = $(e).attr("data-id");
            $("#id").val(id);

            var subject = $(e).attr("data-subject");
            var content = $(e).attr("data-content");
            $("#Answersubject").html(subject);
            $("#AnswerContent").html(content);
            $("#SendAnswer").modal("toggle");
        }
        $(".SendAnswerForm").submit(function (e) {
            $("#Answer").removeClass("error");
            $("#AnswerFile").removeClass("error");


            e.preventDefault();
            var fileName = $("#AnswerFile").val();
            if (fileName != "" && fileName != null) {
                var fileExtension = fileName.replace(/^.*\./, '');
                if (!uploadFileExtentions.includes(fileExtension.toUpperCase())) {
                    toastr.error("فرمت فایل ارسالی صحیح نمیباشد");
                    $("#AnswerFile").addClass("error");
                    return;

                }
            }
            if ($("#Answer").val() == "" || $("#Answer").val() == null) {
                toastr.error("لطفا پاسخ خود را وارد کنید");
                $("#Answer").addClass("error");
                return;
            }
            //check file Exention



            var formData = new FormData(this);


            $.ajax({
                beforeSend: setAuthHeader,
                method: "Post",
                url: '/api/Tickets/AnswerTicket',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (data) {

                    if (data.successCode) {
                        toastr.success(data.message);
                        $("#SendAnswerForm").modal('hide');

                        $("#SendAnswerClose").click();

                        GetData('/api/Tickets/GetAllTicketForAdmin', {}, true);


                    } else {

                        toastr.error(data.message);
                    }
                },
                error: function (data) {

                    if (data.responseJSON == undefined) {
                        toastr.error("مشکلی رخ داده است");
                        return;

                    }
                    var errors = data.responseJSON.message;
                    errors.forEach(elem => {
                        if (elem == "Unauthorized") { elem = "کابر نامعتبر لطفا لاگین کنید" }
                        if (elem == "Forbidden") { elem = "عدم دسترسی " }
                        toastr.error(elem);

                    })
                }
            });

        });
        $(".CreateTicketForm").submit(function (e) {
            $("#content").removeClass("error");
            $("#subject").removeClass("error");
            $("#file").removeClass("error");


            e.preventDefault();

            //check extention
            var fileName = $("#file").val();
            if (fileName != "" && fileName != null) {
                var fileExtension = fileName.replace(/^.*\./, '');
                if (!uploadFileExtentions.includes(fileExtension.toUpperCase())) {
                    toastr.error("فرمت فایل ارسالی صحیح نمیباشد");
                    $("#file").addClass("error");
                    return;

                }
            }
            if ($("#content").val() == "" || $("#content").val() == null) {
                toastr.error("لطفا متن  پیام را وارد کنید");
                $("#content").addClass("error");
                return;
            }

            if ($("#subject").val() == "" || $("#subject").val() == null) {
                toastr.error("لطفا متن  پیام را وارد کنید");
                $("#subject").addClass("error");
                return;
            }
            if ($("#subject").val() == "" || $("#subject").val() == null) {
                toastr.error("لطفا موضوع  پیام را وارد کنید");
                $("#subject").addClass("error");
                return;
            }
            var formData = new FormData(this);

            if ($("#selectAll").prop('checked') == false) {
                if ($("#userId").val() == "" || $("#userId").val() == null) {
                    toastr.error("گیرنده پیام نامشخص است");
                    $("#UserId").addClass("error");
                    return;
                }
            }
            else {

                formData.append("UserId", "all");

            }



            $.ajax({
                beforeSend: setAuthHeader,
                method: "Post",
                url: '/api/Tickets/CreateTicket',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (data) {

                    if (data.successCode) {
                        toastr.success(data.message);
                        $("#CreateTicketForm").modal('hide');


                        $("#CreateTicketClose").click();
                        $(".modal-backdrop").addClass("d-none");

                        GetData('/api/Tickets/GetAllTicketForAdmin', {}, true);


                    } else {

                        toastr.error(data.message);
                    }
                },
                error: function (data) {

                    if (data.responseJSON == undefined) {
                        toastr.error("مشکلی رخ داده است");
                        return;

                    }
                    var errors = data.responseJSON.message;
                    errors.forEach(elem => {
                        if (elem == "Unauthorized") { elem = "کابر نامعتبر لطفا لاگین کنید" }
                        if (elem == "Forbidden") { elem = "عدم دسترسی " }
                        toastr.error(elem);

                    })
                }
            });

        });


        $("#selectAll").click(function (e) {
            if ($(this).prop('checked') == true) {

                $("#userId").prop("disabled", true);


            }
            else {
                $("#userId").prop("disabled", false);




            }
        })


        $("#notifCount").click(function () {
            GetData('/api/Tickets/GetNotifTicketForAdmin', {}, true);

        })

        //seenSender();
        //seenReciever();
        function seenSender() {
            var ids = [];
            $(".reciever").each(function (key, val) {
                ids.push(Number($(val).text()));
            });
            var jsonData = { "ids": ids };
            var data = JSON.stringify(jsonData);
            $.ajax({
                beforeSend: setAuthHeader,
                method: "Post",
                url: '/api/Tickets/ReceiverSeenTicket',
                data: data,
                //cache: false,
                contentType: 'application/json',
                //processData: false,
                success: function (data) {
                    console.log(data);
                },
                error: function (data) {
                    console.log(data)
                    if (data.responseJSON == undefined) {
                        toastr.error("مشکلی رخ داده است");
                        return;

                    }
                    var errors = data.responseJSON.message;
                    errors.forEach(elem => {
                        if (elem == "Unauthorized") { elem = "کابر نامعتبر لطفا لاگین کنید" }
                        if (elem == "Forbidden") { elem = "عدم دسترسی " }
                        toastr.error(elem);

                    })
                }
            });


            setTimeout(function () { GetNotifCount(); }, 2000)
        }
        function seenReciever() {
            var ids = [];
            $(".sender").each(function (key, val) {
                ids.push(Number($(val).text()));
            });
            var jsonData = { "ids": ids };
            var data = JSON.stringify(jsonData);
            $.ajax({
                beforeSend: setAuthHeader,
                method: "Post",
                url: '/api/Tickets/SenderSeenTicket',
                data: data,
                //cache: false,
                contentType: 'application/json',
                //processData: false,
                success: function (data) {
                    console.log(data);
                },
                error: function (data) {
                    console.log(data)
                    if (data.responseJSON == undefined) {
                        toastr.error("مشکلی رخ داده است");
                        return;

                    }
                    var errors = data.responseJSON.message;
                    errors.forEach(elem => {
                        if (elem == "Unauthorized") { elem = "کابر نامعتبر لطفا لاگین کنید" }
                        if (elem == "Forbidden") { elem = "عدم دسترسی " }
                        toastr.error(elem);

                    })
                }
            });


            setTimeout(function () { GetNotifCount(); }, 2000)
        }











        var notifCount = 0;
        function GetNotifCount() {
            $.ajax({
                beforeSend: setAuthHeader,
                method: "Get",
                url: '/api/Tickets/GetNotifTicketCountForAdmin',
                data: {},
                //cache: false,
                contentType: 'application/json',
                //processData: false,
                success: function (data) {
                    $("#notifCount").removeClass("d-none");
                    if (Number(data) > Number(notifCount)) {
                        $(".mt-2").click();
                        Notif(`${Number(data)} پیام جدید دارید  `);

                    }
                    $("#notifCount").html(data);
                    notifCount = data;

                },
                error: function (data) {

                    if (data.responseJSON == undefined) {
                        toastr.error("مشکلی رخ داده است");
                        return;

                    }
                    var errors = data.responseJSON.message;
                    errors.forEach(elem => {
                        if (elem == "Unauthorized") { elem = "کابر نامعتبر لطفا لاگین کنید" }
                        if (elem == "Forbidden") { elem = "عدم دسترسی " }
                        toastr.error(elem);

                    })
                }
            });


        }

        $("#role").change(function () {
            GetData('/api/Tickets/GetAllTicketForAdmin?role=' + $(this).val(), {}, true);

        })

    </script>
}